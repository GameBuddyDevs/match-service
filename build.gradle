plugins {
	id 'java'
	id 'java-library'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
	id 'org.sonarqube' version '3.4.0.2513'
	id "com.diffplug.spotless" version "6.11.0"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'

group = 'com.back2261'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url 'https://s01.oss.sonatype.org/content/repositories/snapshots'
	}
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/java')
		}
		resources {
			srcDir(file('src/integration-test/resources'))
		}
	}
}

task integrationTest(type: Test) {
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}

dependencies {
	implementation 'io.github.GameBuddyDevs:backend-library:0.0.5-SNAPSHOT'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.1'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

check.dependsOn integrationTest
test.finalizedBy(integrationTest, jacocoTestReport)
tasks["sonarqube"].dependsOn "test"


test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // report is always generated after tests run
}

sonarqube {
	properties {
		property 'sonar.coverage.jacoco.xmlReportPaths', "${project.buildDir}/reports/jacoco.xml"
	}
}

jacocoTestReport {
	executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
	reports {
		xml.enabled true
		csv.enabled false
		html.enabled true
		xml.destination file("${buildDir}/reports/jacoco.xml")
	}
}

spotless {
	java {
		target fileTree('.') {
			include '**/*.java'
			exclude '**/build/**', '**/build-*/**'
		}
		toggleOffOn()
		palantirJavaFormat()
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
}
